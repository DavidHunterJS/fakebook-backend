// src/server.ts
import express, { Request, Response, NextFunction } from 'express';
import connectDB from './src/config/db';
import cors from 'cors';
import path from 'path';
import http from 'http';
import { Server as SocketIOServer } from 'socket.io';
import dotenv from 'dotenv';
import socketHandler from './src/sockets/socket';

// Import routes
import authRoutes from './src/routes/auth.routes';
import userRoutes from './src/routes/user.routes';
import postRoutes from './src/routes/post.routes';
// import commentRoutes from './src/routes/comment.routes';
// import friendRoutes from './src/routes/friend.routes';
// import notificationRoutes from './src/routes/notification.routes';
import adminRoutes from './src/routes/admin.routes';

// Load env vars
dotenv.config();

// Initialize express
const app = express();
const server = http.createServer(app);

const clientUrl = process.env.CLIENT_URL || 'http://localhost:3000';

const io = new SocketIOServer(server, {
  cors: {
    origin: clientUrl,
    methods: ['GET', 'POST']
  }
});

// Connect to Database
connectDB();

// Init Middleware
app.use(express.json());
app.use(cors({
  origin: clientUrl,
  credentials: true
}));

// Define Routes
app.use('/api/auth', authRoutes);
app.use('/api/users', userRoutes);
app.use('/api/posts', postRoutes);
// app.use('/api/comments', commentRoutes);
// app.use('/api/friends', friendRoutes);
// app.use('/api/notifications', notificationRoutes);
app.use('/api/admin', adminRoutes);

// Socket.io connection
socketHandler(io);

// Serve static assets in production
if (process.env.NODE_ENV === 'production') {
  // Set static folder
  app.use(express.static(path.join(__dirname, '../../client/build')));
  
  app.get('*', (req: Request, res: Response) => {
    res.sendFile(path.resolve(__dirname, '../../client/build', 'index.html'));
  });
}

// Error handler
app.use((err: Error, req: Request, res: Response, next: NextFunction) => {
  console.error(err.stack);
  res.status(500).send('Server Error');
});

const PORT = process.env.PORT || 5000;

server.listen(PORT, () => console.log(`Server running on port ${PORT}`));

// Handle unhandled promise rejections
process.on('unhandledRejection', (err: Error) => {
  console.log('Unhandled Rejection:', err.message);
  // Close server & exit process
  server.close(() => process.exit(1));
});